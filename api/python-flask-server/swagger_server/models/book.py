# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Book(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, author: str=None, press: str=None, state: str=None):  # noqa: E501
        """Book - a model defined in Swagger

        :param name: The name of this Book.  # noqa: E501
        :type name: str
        :param author: The author of this Book.  # noqa: E501
        :type author: str
        :param press: The press of this Book.  # noqa: E501
        :type press: str
        :param state: The state of this Book.  # noqa: E501
        :type state: str
        """
        self.swagger_types = {
            'name': str,
            'author': str,
            'press': str,
            'state': str
        }

        self.attribute_map = {
            'name': 'name',
            'author': 'author',
            'press': 'press',
            'state': 'state'
        }

        self._name = name
        self._author = author
        self._press = press
        self._state = state

    @classmethod
    def from_dict(cls, dikt) -> 'Book':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Book of this Book.  # noqa: E501
        :rtype: Book
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Book.


        :return: The name of this Book.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Book.


        :param name: The name of this Book.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def author(self) -> str:
        """Gets the author of this Book.


        :return: The author of this Book.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author: str):
        """Sets the author of this Book.


        :param author: The author of this Book.
        :type author: str
        """

        self._author = author

    @property
    def press(self) -> str:
        """Gets the press of this Book.


        :return: The press of this Book.
        :rtype: str
        """
        return self._press

    @press.setter
    def press(self, press: str):
        """Sets the press of this Book.


        :param press: The press of this Book.
        :type press: str
        """

        self._press = press

    @property
    def state(self) -> str:
        """Gets the state of this Book.

        book status in the store  # noqa: E501

        :return: The state of this Book.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this Book.

        book status in the store  # noqa: E501

        :param state: The state of this Book.
        :type state: str
        """
        allowed_values = ["active", "dead", "sold"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
